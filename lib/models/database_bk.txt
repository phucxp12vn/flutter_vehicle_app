import 'package:drift/drift.dart';
import 'dart:io';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import 'package:drift/native.dart';

part 'database.g.dart';

class LoginStates extends Table {
  BoolColumn get isLoggedIn => boolean()();
}

@DriftDatabase(include: {'tables/auth.drift'})
class AppDatabase extends _$AppDatabase {
  AppDatabase._() : super(_openConnection());
  static final AppDatabase instance = AppDatabase._();

  @override
  int get schemaVersion => 1;

  Future<int> insertLoginState(LoginStatesCompanion loginState) =>
      into(loginStates).insert(loginState);

  Future<bool> checkLoginState() async {
    final result = await (select(loginStates)..limit(1)).getSingleOrNull();
    return result?.isLoggedIn ?? false;
  }
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase(file);
  });
}
